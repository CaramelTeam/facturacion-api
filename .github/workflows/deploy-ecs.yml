on:
  push:
    branches:
      - cicd-ecs

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and push to ECR

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: actions/checkout@v2
        id: build-image
      - name: Build and push to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: factu-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          STAGE="prod" IMAGE_TAG=$IMAGE_TAG ECR_REGISTRY=$ECR_REGISTRY APP_PORT=3001 docker-compose -f docker-compose.prod.yml build
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:qa-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:qa-$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: my-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: my-service
          cluster: em-cluster
          wait-for-service-stability: true
